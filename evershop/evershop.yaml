apiVersion: apps/v1
kind: Deployment
metadata:
  name: evershop
  namespace: evershop
spec:
  replicas: 1
  selector:
    matchLabels:
      app: evershop
  template:
    metadata:
      labels:
        app: evershop
    spec:
      dnsPolicy: "None"
      dnsConfig:
        nameservers:
          - 10.96.0.10 # Kubernetes DNS service
      initContainers:
      - name: wait-for-postgres
        image: busybox:latest
        imagePullPolicy: IfNotPresent
        command: ['sh', '-c', '
          until nc -z -v postgres.evershop.svc.cluster.local 5432; do 
            echo "Waiting for postgres..."; 
            sleep 2; 
          done;']
      - name: wait-for-npm
        image: busybox:latest
        imagePullPolicy: IfNotPresent
        command: ['sh', '-c', '
          until nc -z -v registry.npmjs.org 443; do
            echo "Waiting for npm registry...";
            sleep 2;
          done;']
      containers:
      - name: evershop
        image: node:18-alpine
        ports:
        - containerPort: 3000
        envFrom:
        - configMapRef:
            name: evershop-config
        env:
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: evershop-secret
              key: DB_PASSWORD
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        command: ["/bin/sh", "-c"]
        args:
          - |
            mkdir -p /app
            cd /app
            echo "Creating evershop app..."
            npx --yes create-evershop-app .
            echo "Building evershop app..."
            npm run build
            echo "Starting evershop app..."
            npm run start
---
apiVersion: v1
kind: Service
metadata:
  name: evershop
  namespace: evershop
spec:
  selector:
    app: evershop
  ports:
  - port: 80
    targetPort: 3000
  type: LoadBalancer
  externalTrafficPolicy: Local
