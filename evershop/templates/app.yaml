apiVersion: apps/v1
kind: Deployment
metadata:
  name: evershop-app
  namespace: {{ .Values.appConfig.namespace }}
spec:
  replicas: {{ .Values.appConfig.replicaCount }}
  selector:
    matchLabels:
      app: evershop-app
  template:
    metadata:
      labels:
        app: evershop-app
    spec:
      dnsPolicy: "None"
      dnsConfig:
        nameservers:
          - 10.96.0.10 # Kubernetes DNS service
      initContainers:
      - name: wait-for-postgres
        image: busybox:latest
        imagePullPolicy: IfNotPresent
        command: ['sh', '-c', '
          until nc -z -v postgres.evershop.svc.cluster.local 5432; do 
            echo "Waiting for postgres..."; 
            sleep 2; 
          done;']
      - name: wait-for-npm
        image: busybox:latest
        imagePullPolicy: IfNotPresent
        command: ['sh', '-c', '
          until nc -z -v registry.npmjs.org 443; do
            echo "Waiting for npm registry...";
            sleep 2;
          done;']
      containers:
      - name: evershop-app
        image: node:18-alpine
        ports:
        - containerPort: 3000
        envFrom:
        - configMapRef:
            name: evershop-config
        env:
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: evershop-secret
              key: DB_PASSWORD
        readinessProbe:
          httpGet:
            path: /
            port: 3000
          initialDelaySeconds: 60
          periodSeconds: 60
          failureThreshold: 10
        command: ["/bin/sh", "-c"]
        volumeMounts:
        - name: repo-files
          mountPath: /repo
        args:
          - |
            sleep 10
            ln -s /repo/evershop/app /app
            cd /app
            while [ ! -e "/app/initialized" ]; do
              echo "Waiting for initialization..."
              sleep 30  # Check if system is initialized every 10 seconds
            done
            echo "System is initialized."
            echo "Starting evershop app..."
            npm run start
      volumes:
      - name: repo-files
        persistentVolumeClaim:
          claimName: repo-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: evershop-service
  namespace: {{ .Values.appConfig.namespace }}
spec:
  selector:
    app: evershop-app
  ports:
  - port: 80
    targetPort: 3000
  type: LoadBalancer
  externalTrafficPolicy: Local
